{"ast":null,"code":"var _jsxFileName = \"G:\\\\ted\\\\src\\\\components\\\\Notification.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n/**\r\n * Notification component displays a temporary message to the user.\r\n * It supports different types (success, error, info) for varying background colors.\r\n * The notification auto-hides after a few seconds or can be manually dismissed.\r\n * @param {object} props - The component's properties.\r\n * @param {string} props.message - The message content to display.\r\n * @param {'success' | 'error' | 'info'} props.type - The type of notification (influences background color).\r\n * @param {function} props.onClose - Callback function to execute when the notification is closed.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notification = ({\n  message,\n  type,\n  onClose\n}) => {\n  _s();\n  // Local state to control visibility, allowing for fade-out animations if needed\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    // When a new message arrives, make the notification visible\n    if (message) {\n      setIsVisible(true);\n      // Set a timer to automatically close the notification after 5 seconds\n      const timer = setTimeout(() => {\n        setIsVisible(false); // Start fade out\n        // After fade out, truly remove from DOM\n        const hideTimer = setTimeout(() => onClose(), 300); // 300ms for potential fade out transition\n        return () => clearTimeout(hideTimer);\n      }, 5000); // Notification visible for 5 seconds\n\n      // Clear the timer if the component unmounts or message changes before timeout\n      return () => clearTimeout(timer);\n    } else {\n      setIsVisible(false); // If message is empty, ensure it's hidden\n    }\n  }, [message, onClose]); // Re-run effect when message or onClose changes\n\n  // If no message, don't render anything\n  if (!message && !isVisible) return null;\n\n  // Determine background color based on notification type\n  const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-xl flex items-center justify-between z-50 transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsVisible(false);\n        setTimeout(() => onClose(), 300);\n      },\n      className: \"ml-4 text-white font-bold text-lg leading-none\",\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Notification, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n_c = Notification;\nexport default Notification;\nvar _c;\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Notification","message","type","onClose","_s","isVisible","setIsVisible","timer","setTimeout","hideTimer","clearTimeout","bgColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["G:/ted/src/components/Notification.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Notification component displays a temporary message to the user.\r\n * It supports different types (success, error, info) for varying background colors.\r\n * The notification auto-hides after a few seconds or can be manually dismissed.\r\n * @param {object} props - The component's properties.\r\n * @param {string} props.message - The message content to display.\r\n * @param {'success' | 'error' | 'info'} props.type - The type of notification (influences background color).\r\n * @param {function} props.onClose - Callback function to execute when the notification is closed.\r\n */\r\nconst Notification = ({ message, type, onClose }) => {\r\n    // Local state to control visibility, allowing for fade-out animations if needed\r\n    const [isVisible, setIsVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // When a new message arrives, make the notification visible\r\n        if (message) {\r\n            setIsVisible(true);\r\n            // Set a timer to automatically close the notification after 5 seconds\r\n            const timer = setTimeout(() => {\r\n                setIsVisible(false); // Start fade out\r\n                // After fade out, truly remove from DOM\r\n                const hideTimer = setTimeout(() => onClose(), 300); // 300ms for potential fade out transition\r\n                return () => clearTimeout(hideTimer);\r\n            }, 5000); // Notification visible for 5 seconds\r\n\r\n            // Clear the timer if the component unmounts or message changes before timeout\r\n            return () => clearTimeout(timer);\r\n        } else {\r\n            setIsVisible(false); // If message is empty, ensure it's hidden\r\n        }\r\n    }, [message, onClose]); // Re-run effect when message or onClose changes\r\n\r\n    // If no message, don't render anything\r\n    if (!message && !isVisible) return null;\r\n\r\n    // Determine background color based on notification type\r\n    const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';\r\n\r\n    return (\r\n        <div className={`fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-xl flex items-center justify-between z-50 transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}>\r\n            <span>{message}</span>\r\n            <button onClick={() => { setIsVisible(false); setTimeout(() => onClose(), 300); }} className=\"ml-4 text-white font-bold text-lg leading-none\">&times;</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIK,OAAO,EAAE;MACTK,YAAY,CAAC,IAAI,CAAC;MAClB;MACA,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC3BF,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACrB;QACA,MAAMG,SAAS,GAAGD,UAAU,CAAC,MAAML,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACpD,OAAO,MAAMO,YAAY,CAACD,SAAS,CAAC;MACxC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV;MACA,OAAO,MAAMC,YAAY,CAACH,KAAK,CAAC;IACpC,CAAC,MAAM;MACHD,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC,EAAE,CAACL,OAAO,EAAEE,OAAO,CAAC,CAAC,CAAC,CAAC;;EAExB;EACA,IAAI,CAACF,OAAO,IAAI,CAACI,SAAS,EAAE,OAAO,IAAI;;EAEvC;EACA,MAAMM,OAAO,GAAGT,IAAI,KAAK,SAAS,GAAG,cAAc,GAAGA,IAAI,KAAK,OAAO,GAAG,YAAY,GAAG,aAAa;EAErG,oBACIH,OAAA;IAAKa,SAAS,EAAE,uBAAuBD,OAAO,qHAAqHN,SAAS,GAAG,aAAa,GAAG,WAAW,EAAG;IAAAQ,QAAA,gBACzMd,OAAA;MAAAc,QAAA,EAAOZ;IAAO;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtBlB,OAAA;MAAQmB,OAAO,EAAEA,CAAA,KAAM;QAAEZ,YAAY,CAAC,KAAK,CAAC;QAAEE,UAAU,CAAC,MAAML,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC;MAAE,CAAE;MAACS,SAAS,EAAC,gDAAgD;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7J,CAAC;AAEd,CAAC;AAACb,EAAA,CAnCIJ,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAqClB,eAAeA,YAAY;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}